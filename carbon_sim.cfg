# Configuration file for the carbon simulator
[general]
output_dir = "./output_files/"
output_file = "sim.out"

# Total number of cores in all processes
total_cores = 8
num_processes = 1

enable_dcache_modeling = true
enable_icache_modeling = false
enable_performance_modeling = true

enable_shared_mem = true
enable_syscall_modeling = true

[transport]
base_port = 2000

[log]
enabled = false
stack_trace = false
disabled_modules = ""
#enabled_modules = "l1_cache_cntlr.cc memory_manager.cc network.cc core.cc"
enabled_modules = ""

[progress_trace]
enabled = false
interval = 5000

[clock_skew_minimization]
scheme = random_pairs  # Valid Schemes are 'none,barrier,random_pairs,ring'

[clock_skew_minimization/barrier]
quantum = 1000    # Synchronize after every quantum
[clock_skew_minimization/random_pairs]
quantum = 1000   # Could be equal to slack but kept different for generality
slack = 1000
sleep_fraction = 0.5   # Equal to the fraction of computed time the core sleeps
[clock_skew_minimization/ring]
slack = 1000       # Messages could be sent on the ring after a delay. Not shown here

[stack]
stack_base = 2415919104
stack_size_per_core = 4194304

[process_map]
process0 = "127.0.0.1"
process1 = "127.0.0.1"
process2 = "127.0.0.1"
process3 = "127.0.0.1"
process4 = "127.0.0.1"
process5 = "127.0.0.1"
process6 = "127.0.0.1"
process7 = "127.0.0.1"
process8 = "127.0.0.1"
process9 = "127.0.0.1"
process10 = "127.0.0.1"
process11 = "127.0.0.1"
process12 = "127.0.0.1"
process13 = "127.0.0.1"
process14 = "127.0.0.1"
process15 = "127.0.0.1"
process16 = "127.0.0.1"

[perf_model/core]
frequency = 3.16 # In GHz
type = simple
num_store_buffer_entries = 20
num_outstanding_loads = 32

[perf_model/core/static_instruction_costs]
add=1
sub=1
mul=3
div=18
fadd=3
fsub=3
fmul=5
fdiv=6
generic=1
jmp=1

[perf_model/l1_icache]
enable = true
cache_block_size = 64
cache_size = 32 # in KB
associativity = 8
replacement_policy = lru
data_access_time = 3
tags_access_time = 1
perf_model_type = parallel

[perf_model/l1_dcache]
enable = true
cache_block_size = 64
cache_size = 32 # in KB
associativity = 8
replacement_policy = lru 
track_detailed_cache_counters = false
data_access_time = 3
tags_access_time = 1
perf_model_type = parallel

[perf_model/l2_cache]
enable = true
cache_block_size = 64
cache_size = 3072  # in KB - 6 MB cache shared by two cores = 3MB/core
associativity = 24
replacement_policy = lru  # Not documented but I'm guessing pseudo-LRU
track_detailed_cache_counters = false
data_access_time = 15
tags_access_time = 4  # This is just a guess for Penryn
perf_model_type = parallel

[perf_model/dram_directory]
total_entries = 24576
associativity = 24
max_hw_sharers = 16 # number of sharers supported in hardware
directory_type = limited_broadcast
home_lookup_param = 8
directory_cache_access_time = 10
[perf_model/dram_directory/limitless]
software_trap_penalty = 200 # number of cycles added to clock when trapping into software (pulled number from Chaiken papers, which explores 25-150 cycle penalties)

[perf_model/dram]
access_cost = 75 # In nanoseconds
total_bandwidth = 5.3 # In GB/s
controller_present_on_every_core = true
# If true, then the next value is ignored
# It is simply equal to the number of cores
num_controllers = 2
[perf_model/dram/queue_model]
enabled = true
moving_avg_enabled = true
moving_avg_window_size = 20
moving_avg_type = arithmetic_mean

[perf_model/branch_predictor]
type=one_bit
mispredict_penalty=14 # A guess based on Penryn pipeline depth
size=1024

[network]
user_model = hop_counter
memory_model_1 = hop_counter
memory_model_2 = hop_counter
system_model = magic

# see comments in network_model_analytical.cc
[network/analytical]
Tw2 = 1
s = 1
n = 1
W = 32
update_interval = 1000
processing_cost = 100

[network/emesh_hop_by_hop]
link_bandwidth = 256 # In bits/cycle
hop_latency = 3 # In cycles
broadcast_tree_enabled = false
[network/emesh_hop_by_hop/queue_model]
enabled = true
moving_avg_enabled = false
moving_avg_window_size = 20
moving_avg_type = arithmetic_mean
