# This makefile is included by individual tests.
#
# README: Variables that you might care about. Most of these can be
# overridden, which eliminates the variables they are derived from as
# being important. Unfortunately, I don't know how to break make
# functions across multiple lines, so run_fn is completely illegible.
#
# SOURCES - source files to build
# TARGET - name of executable
# RUN - command to run after building; derived from BUILD_MODE, MODE, EXEC, PROCS, and SIM_FLAGS
#
# PROCS - number of processes
# CORES - number of cores
# ENABLE_SM - enable shared memory (true/false)
# APP_FLAGS - flags to pass to the application
# BUILD_MODE - set to build to not run anything
# MODE - set to 'pin' to use pin, set to '' for running application standalone
# CONFIG_FILE - configuration file to use to run the Graphite simulator
# OUTPUT_DIR - directory to write the simulation output
# APP_SPECIFIC_CXX_FLAGS - application-specific CXX flags (e.g., include paths)
# SIM_FLAGS - config flags passed to the simulator. Derived from CORES, PROCS. See sim_flags_fn.
# EXEC - command to run; derived from TARGET and APP_FLAGS

SIM_ROOT ?= $(CURDIR)/../../..

# Run options
include $(SIM_ROOT)/Makefile.config

PIN_BIN=$(PIN_HOME)/intel64/bin/pinbin
PIN_TOOL?=$(SIM_ROOT)/lib/pin_sim

# PIN_RUN=$(PIN_BIN) -pause_tool 10 -mt -t $(PIN_TOOL)
PIN_RUN=$(PIN_BIN) -tool_exit_timeout 1 -mt -t $(PIN_TOOL)
VALGRIND = # valgrind --leak-check=yes

PROCS ?= 1
CORES ?= 64
ENABLE_SM ?= true 
APP_FLAGS ?=
BUILD_MODE ?= # Set to build to not run anything
MODE ?= pin # Set to 'pin' to use pin
CONFIG_FILE ?= carbon_sim.cfg
OUTPUT_DIR ?= $(shell date +%Y-%m-%d_%H-%M-%S)
APP_SPECIFIC_CXX_FLAGS ?= 
CONFIG_FILE_ABS_PATH ?= $(SIM_ROOT)/$(CONFIG_FILE)
OUTPUT_DIR_ABS_PATH ?= $(SIM_ROOT)/results/$(OUTPUT_DIR)

# Use: $(call sim_flags_fn, $(1-CORES), $(2-PROCS))
sim_flags_fn = -c $(CONFIG_FILE_ABS_PATH) --general/total_cores=$(1) --general/num_processes=$(2) --general/enable_shared_mem=$(3) --general/output_dir=$(4)
SIM_FLAGS ?= $(call sim_flags_fn,$(CORES),$(PROCS),$(ENABLE_SM),$(OUTPUT_DIR_ABS_PATH))

EXEC ?= $(CURDIR)/$(TARGET) $(APP_FLAGS) # command thats actually executed
launch_fn = $(SIM_ROOT)/tools/spawn_master.py $(1) $(2) # 1 - NUM_PROCS # 2 - CONFIG_FILE

# Use: $(call run_fn, $(1-MODE), $(2-EXEC), $(3-PROCS), $(4-FLAGS), $(5-CONFIG_FILE_ABS_PATH))
run_fn = $(if $(findstring build,$(BUILD_MODE)), ,$(if $(findstring pin,$(1)),$(call launch_fn,$(3),$(5)) $(PIN_RUN) $(4) -- $(2),$(call launch_fn,$(3),$(5)) $(VALGRIND) $(2) $(4)))
RUN ?= cd $(SIM_ROOT) ; $(call run_fn,$(MODE),$(EXEC),$(PROCS),$(SIM_FLAGS),$(CONFIG_FILE_ABS_PATH))

# Build targets
all: $(TARGET) create_output_dir
	$(RUN)

create_output_dir:
	rm -f $(SIM_ROOT)/results/current
	mkdir -p $(OUTPUT_DIR_ABS_PATH)
	echo "$(RUN)" > $(OUTPUT_DIR_ABS_PATH)/command
	cp $(CONFIG_FILE_ABS_PATH) $(OUTPUT_DIR_ABS_PATH)/carbon_sim.cfg
	ln -s $(OUTPUT_DIR_ABS_PATH) $(SIM_ROOT)/results/current

# Compiler flags
LD_FLAGS = -static -u CarbonStartSim -u CarbonStopSim -u pthread_create -u pthread_join -L$(SIM_ROOT)/lib
LD_LIBS = -lcarbon_sim -pthread

OBJECTS ?= $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(patsubst %.cc,%.o,$(SOURCES) ) ) )

CLEAN=$(findstring clean,$(MAKECMDGOALS))
ifeq ($(CLEAN),)
include $(SIM_ROOT)/common/Makefile.common
endif

CXXFLAGS = $(APP_SPECIFIC_CXX_FLAGS) -I$(SIM_ROOT)/common/user -I$(SIM_ROOT)/common/misc -c -Wall -O2
CFLAGS = $(CXXFLAGS) -std=c99

# Rules
LIB_CARBON=$(SIM_ROOT)/lib/libcarbon_sim.a
LIB_PIN_SIM=$(SIM_ROOT)/lib/pin_sim.so

.PHONY: $(TARGET)

.SUFFIXES:  .o .c .h .cc

# We basically want to try re-making libcarbon_sim.a and pin_sim.so
# and then /if that produces a new library/ recompile the test. There
# is probably some 'correct' way to do this in a makefile that doesn't
# always rebuild the test, but I don't know what it is. (The problem
# is we don't want to include all the dependencies for the libraries
# in this makefile.)
#
# Also, we force recompilation if any of the test object files are
# newer than the target. (Make does this as well but we override it
#  with our if-statement.)
$(TARGET): $(OBJECTS) 
	make -C $(SIM_ROOT)/common
	$(if $(findstring pin,$(MODE)),make -C $(SIM_ROOT)/pin)
	if $(foreach source,$(OBJECTS),[ ! -e $(TARGET) ] || [ $(source) -nt $(TARGET) ] ||) [ $(LIB_CARBON) -nt $(TARGET) ] || [ $(LIB_PIN_SIM) -nt $(TARGET) ]; \
   then $(CXX) $^ -o $@ $(LD_FLAGS) $(LD_LIBS); \
	fi

$(LIB_CARBON):
	make -C $(SIM_ROOT)/common

$(LIB_PIN_SIM):
	make -C $(SIM_ROOT)/pin

ifneq ($(CLEAN),)
clean:
	$(RM) *.o *.d $(TARGET)
endif
