SIM_ROOT ?= $(CURDIR)/../

DIRECTORIES = $(SIM_ROOT)/common/core/        \
          $(SIM_ROOT)/common/core/cache/      \
          $(SIM_ROOT)/common/network/         \
          $(SIM_ROOT)/common/transport/       \
          $(SIM_ROOT)/common/misc/            \
          $(SIM_ROOT)/common/config/	      \
          $(SIM_ROOT)/common/system/          \
          $(SIM_ROOT)/common/performance_model/      \
          $(SIM_ROOT)/common/performance_model/branch_predictors/      \
          $(SIM_ROOT)/common/performance_model/performance_models/     \
          $(SIM_ROOT)/common/user/

CLEAN=$(findstring clean,$(MAKECMDGOALS))

OS_SERVICES_ROOT = $(SIM_ROOT)/os-services-25032-gcc.4.0.0-linux-ia32_intel64

BUILD_32 = 1

# MPI Support
MPI_DIR = /afs/csail/group/carbon/tools/mpich2-1.0.8/install
CC = $(MPI_DIR)/bin/mpicc
CXX = $(MPI_DIR)/bin/mpicxx

# OS Services Support
LD_LIBS += -los-services
ifeq ($(BUILD_32),1)
  CXXFLAGS += -I$(OS_SERVICES_ROOT)/include-ia32
  LD_FLAGS += -los-services -L $(OS_SERVICES_ROOT)/ia32 -m32
else
  CXXFLAGS += -I$(OS_SERVICES_ROOT)/include-intel64
  LD_FLAGS += -los-services -L $(OS_SERVICES_ROOT)/intel64
endif

# Boost Support
#   hack to find version -- this sucks
#ifeq ($(strip $(wildcard /usr/include/boost/version.hpp)),)
ifeq (1,1) # FIXME: Default to 1_38 since TiG installed the wrong versions
	BOOST_VERSION = 1_38
else
	BOOST_VERSION = 1_35
endif

ifeq ($(BOOST_VERSION),1_38)
	BOOST_ROOT = /afs/csail/group/carbon/tools/boost_1_38_0
	BOOST_SUFFIX = gcc41-mt-1_38
	export LD_LIBRARY_PATH := $(BOOST_ROOT)/stage/lib:$(LD_LIBRARY_PATH)
	CXXFLAGS += -I$(BOOST_ROOT)
	LD_FLAGS += -L$(BOOST_ROOT)/stage/lib
else
	BOOST_SUFFIX = mt
endif
LD_LIBS += -lboost_filesystem-$(BOOST_SUFFIX) -lboost_system-$(BOOST_SUFFIX) -pthread

LD_FLAGS += -L$(SIM_ROOT)/lib
export LD_LIBRARY_PATH := $(SIM_ROOT)/lib:$(LD_LIBRARY_PATH)

# Include paths
CXXFLAGS+=-c $(foreach dir,$(DIRECTORIES),-I$(dir)) \
          -I /afs/csail/group/carbon/tools/mpich2-1.0.8/install/include/ \
          -fomit-frame-pointer -Wall -Werror -Wno-unknown-pragmas -O0 -MMD -m32 -ggdb3

# Build rules for dependency generation
%.d: %.cpp
	$(CXX) -MM -MG $(CXXFLAGS) $< | sed -e 's,^\([^:]*\)\.o[ ]*:,$(@D)/\1.o $(@D)/\1.d:,' >$@

%.d: %.cc
	$(CXX) -MM -MG $(CXXFLAGS) $< | sed -e 's,^\([^:]*\)\.o[ ]*:,$(@D)/\1.o $(@D)/\1.d:,' >$@

%.d: %.c
	$(CC) -MM -MG $(CFLAGS) $< | sed -e 's,^\([^:]*\)\.o[ ]*:,$(@D)/\1.o $(@D)/\1.d:,' >$@

ifneq ($(MAKECMDGOALS),clean)
include $(OBJECTS:%.o=%.d)
endif

# Build rules for object generation
%.o : %.cpp
	$(CXX) $(CXXFLAGS) -o $@ $<

%.o : %.cc
	$(CXX) $(CXXFLAGS) -o $@ $<

%.o : %.c
	$(CC) $(CFLAGS) -c -o $@ $<

# targets
all: $(OBJECTS)

ifneq ($(CLEAN),)
clean:
	-rm -f *.o *.d
endif
